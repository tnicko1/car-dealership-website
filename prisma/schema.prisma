// This file is the single source of truth for your database schema.

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("MIGRATE_DATABASE_URL")
}

// Defines the Car table in your database
model Car {
  id          String   @id @default(cuid())
  make        String
  model       String
  year        Int
  price       Int
  mileage     Int
  horsepower  Int
  fuelType    String
  transmission String
  bodyStyle   String
  features    String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  images CarImage[]

  // Detailed Specifications
  category          String?
  engineVolume      Float?
  cylinders         Int?
  driveWheels       String?
  doors             Int?
  airbags           Int?
  wheel             String?
  color             String?
  interiorColor     String?
  interiorMaterial  String?
  exchange          Boolean?
  technicalInspection Boolean?

  // New Fields from our discussion
  vin               String? @unique
  stockNumber       String? @unique
  engineCode        String?
  paintCode         String?
  topSpeed          Int?
  zeroToSixty       Float? // 0-60 mph
  length            Float? // in inches
  width             Float? // in inches
  height            Float? // in inches
  wheelbase         Float? // in inches
  cargoCapacity     Float? // in cubic feet
  groundClearance   Float? // in inches
  weight            Int? // in lbs
  vehicleHistoryUrl String?

  // General Specifications (Comfort, Safety, Multimedia, Other)
  comfort           String[]
  safety            String[]
  multimedia        String[]
  other             String[]

  wishlistedBy User[] @relation

  owner   User   @relation("UserCars", fields: [userId], references: [id])
  userId  String
}

model CarImage {
  id        String   @id @default(cuid())
  url       String
  carId     String
  car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Testimonial {
    id          String @id @default(cuid())
    name        String
    testimonial String
    rating      Int
    createdAt   DateTime @default(now())
}

// Models required by NextAuth.js Prisma Adapter
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  firstName     String?
  lastName      String?
  username      String?   @unique
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  phone         String?
  role          String    @default("user") // "user" or "admin"
  accounts      Account[]
  sessions      Session[]
  wishlist      Car[]     @relation
  cars          Car[]     @relation("UserCars")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}