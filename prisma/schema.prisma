generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("MIGRATE_DATABASE_URL")
}

model Car {
  id                  String       @id @default(cuid())
  make                String
  model               String
  year                Int
  price               Int
  mileage             Int
  horsepower          Int
  fuelType            String
  transmission        String
  bodyStyle           String
  features            String[]
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  category            String?
  engineVolume        Float?
  cylinders           Int?
  driveWheels         String?
  doors               Int?
  airbags             Int?
  wheel               String?
  color               String?
  interiorColor       String?
  interiorMaterial    String?
  exchange            Boolean?
  technicalInspection Boolean?
  vin                 String?      @unique
  stockNumber         String?      @unique
  engineCode          String?
  paintCode           String?
  topSpeed            Int?
  zeroToSixty         Float?
  length              Float?
  width               Float?
  height              Float?
  wheelbase           Float?
  cargoCapacity       Float?
  groundClearance     Float?
  weight              Int?
  vehicleHistoryUrl   String?
  verified            Boolean?     @default(false)
  comfort             String[]
  safety              String[]
  multimedia          String[]
  other               String[]
  userId              String
  owner               User         @relation("UserCars", fields: [userId], references: [id])
  images              CarImage[]
  Transaction         Transaction?
  wishlistedBy        User[]       @relation("CarToUser")
}

model CarImage {
  id        String   @id @default(cuid())
  url       String
  carId     String
  createdAt DateTime @default(now())
  car       Car      @relation(fields: [carId], references: [id], onDelete: Cascade)
}

model Testimonial {
  id          String   @id @default(cuid())
  name        String
  testimonial String
  rating      Int
  createdAt   DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  password          String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                                     String         @id @default(cuid())
  firstName                              String?
  lastName                               String?
  username                               String?        @unique
  email                                  String?        @unique
  emailVerified                          DateTime?
  image                                  String?
  phone                                  String?
  role                                   String         @default("user")
  phoneVerified                          Boolean        @default(false)
  emailNotifications                     Boolean        @default(true)
  accounts                               Account[]
  cars                                   Car[]          @relation("UserCars")
  Message                                Message[]
  Notification                           Notification[]
  reviewsAsReviewer Review[] @relation("ReviewerReviews")
  reviewsAsSeller   Review[] @relation("SellerReviews")
  sessions                               Session[]
  Transaction_Transaction_buyerIdToUser  Transaction[]  @relation("Transaction_buyerIdToUser")
  Transaction_Transaction_sellerIdToUser Transaction[]  @relation("Transaction_sellerIdToUser")
  UserProfile                            UserProfile?
  wishlist                               Car[]          @relation("CarToUser")
  conversations Conversation[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages     Message[]
  participants User[]
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  senderId       String
  content        String
  createdAt      DateTime     @default(now())
  isRead         Boolean      @default(false)
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  sender         User         @relation(fields: [senderId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  body      String
  title     String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id                           String      @id @default(cuid())
  transactionId                String      @unique
  rating                       Int
  comment                      String?
  reviewerId                   String
  sellerId                     String
  createdAt                    DateTime    @default(now())
  reviewer      User        @relation("ReviewerReviews", fields: [reviewerId], references: [id])
  seller        User        @relation("SellerReviews", fields: [sellerId], references: [id])
  Transaction                  Transaction @relation(fields: [transactionId], references: [id])
}

model Transaction {
  id                              String   @id
  carId                           String   @unique
  sellerId                        String
  buyerId                         String
  price                           Int
  createdAt                       DateTime @default(now())
  Review                          Review?
  User_Transaction_buyerIdToUser  User     @relation("Transaction_buyerIdToUser", fields: [buyerId], references: [id])
  Car                             Car      @relation(fields: [carId], references: [id])
  User_Transaction_sellerIdToUser User     @relation("Transaction_sellerIdToUser", fields: [sellerId], references: [id])
}

model UserProfile {
  id                   String   @id @default(cuid())
  userId               String   @unique
  bio                  String?
  location             String?
  website              String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  github               String?
  linkedin             String?
  signalEnabled        Boolean  @default(false)
  signalNumber         String?
  telegramEnabled      Boolean  @default(false)
  telegramNumber       String?
  useSameNumberForApps Boolean  @default(true)
  viberEnabled         Boolean  @default(false)
  viberNumber          String?
  whatsappEnabled      Boolean  @default(false)
  whatsappNumber       String?
  x                    String?
  User                 User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Verification {
  id        String   @id @default(cuid())
  phone     String
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([phone, code])
}
